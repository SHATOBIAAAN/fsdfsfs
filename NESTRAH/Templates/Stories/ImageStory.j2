{% extends "base/base.j2" %}

{% block head %}
    
    <link rel="stylesheet" href="{{ static('css/ImageStory.css') }}">
{% endblock %}

{% block content %}
<div class=" story-media-page">
    <div class="main-info-text">
        <p class="back-link-text"><a href="javascript:void(0)" id="backButton" class="back-link">Вернуться к истории ↩︎</a></p>
        
        <div class="story-header">
            <h1 class="story-title">{{ story.title }}</h1>
            <div class="story-meta">
                <div class="story-meta-item">
                    <span class="story-meta-label">Автор:</span>
                    <span>{{ story.user.profile.nickname }}</span>
                </div>
                <div class="story-meta-item">
                    <span class="story-meta-label">Категория:</span>
                    {% if story.categories.exists() %}
                        <span>
                            {% for category in story.categories.all() %}
                                <span class="story-category-tag">{{ category.name }}</span>
                            {% endfor %}
                        </span>
                    {% elif story.category %}
                        <span>{{ story.category.name }}</span>
                    {% else %}
                        <span>Без категории</span>
                    {% endif %}
                </div>
                <div class="story-meta-item">
                    <span class="story-meta-label">Дата:</span>
                    <span>{{ story.created_at.strftime('%d.%m.%Y') }}</span>
                </div>
            </div>
        </div>
       

        
        <h2>Медиа файлы</h2>
  
        {% if media_files.exists() %}
        <div class="media-gallery">
            {% set displayed_count = 0 %}
            {% for media in media_files %}
                {% if media.file_type == 'image' or (media.file.url and media.file.url|lower).endswith('.svg') %}
                    {% if displayed_count < 6 %}
                        {% set displayed_count = displayed_count + 1 %}
                        <div class="media-item" data-index="{{ loop.index0 }}" data-type="{% if (media.file.url and media.file.url|lower).endswith('.svg') %}svg{% else %}image{% endif %}" data-src="{{ media.file.url }}">
                            <img src="{{ media.file.url }}" alt="Изображение {{ loop.index }}" loading="lazy">
                        </div>
                    {% endif %}
                {% endif %}
            {% endfor %}
        </div>
        {% if media_files.count() > 6 %}
        <div class="media-counter">
            <p>Показано 6 из {{ media_files.count() }} медиа файлов</p>
        </div>
        {% endif %}
        {% else %}
        <div class="empty-media">
            <h3>Нет медиа файлов</h3>
            <p>К этой истории не прикреплены медиа файлы.</p>
        </div>
        {% endif %}
    </div>    
</div>
  
<!-- Модальное окно для просмотра медиа -->
<div class="media-modal" id="mediaModal">
    <span class="close-modal">&times;</span>
    <div class="modal-content" id="modalContent"></div>
    <div class="media-nav">
        <button class="media-nav-btn prev-media">&#10094;</button>
        <button class="media-nav-btn next-media">&#10095;</button>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const mediaItems = document.querySelectorAll('.media-item:not(.other)');
        const modal = document.getElementById('mediaModal');
        const modalContent = document.getElementById('modalContent');
        const closeBtn = document.querySelector('.close-modal');
        const prevBtn = document.querySelector('.prev-media');
        const nextBtn = document.querySelector('.next-media');
        
        // Получаем параметры URL при загрузке страницы
        const urlParams = new URLSearchParams(window.location.search);
        const slideIndex = urlParams.get('slide_index');
        const fromStoryId = urlParams.get('from_story_id');
        const categoriesParam = urlParams.get('categories');
        const storyId = {{ story.id }};
        const referrer = document.referrer;
        
        // Сохраняем оригинальный URL списка историй, если пришли со списка
        if (referrer.includes('/stories') && !referrer.includes('/media/') && !sessionStorage.getItem('original_stories_url')) {
            sessionStorage.setItem('original_stories_url', referrer);
        }
        
        // Сохраняем данные в localStorage
        if (slideIndex) {
            localStorage.setItem('lastSlideIndex', slideIndex);
        }
        
        // Сохраняем категории, если они есть
        if (categoriesParam) {
            localStorage.setItem('selectedCategories', categoriesParam);
        }
        
        // Добавляем обработчики для тегов категорий
        document.querySelectorAll('.story-category-tag').forEach(function(tag) {
            tag.addEventListener('click', function(e) {
                e.preventDefault();
                
                // Получаем ID категории из ссылки
                const href = this.getAttribute('href');
                const urlObj = new URL(href, window.location.origin);
                const categoryId = urlObj.searchParams.get('categories');
                
                if (categoryId) {
                    // Сохраняем категорию в localStorage
                    localStorage.setItem('selectedCategories', categoryId);
                    console.log('Сохранена категория:', categoryId);
                    
                    // Переходим по ссылке
                    window.location.href = href;
                }
            });
        });
        
        // Код для обработки кнопки "Вернуться к истории"
        const backButton = document.getElementById('backButton');
        if (backButton) {
            backButton.addEventListener('click', function(e) {
                e.preventDefault();
                
                // Возвращаемся на страницу истории
                window.location.href = `/stories/${storyId}/`;
            });
        }
        
        let currentIndex = 0;
        const mediaArray = [];
        
        // Собираем данные о всех медиа элементах, исключая 'other' (файлы для скачивания)
        mediaItems.forEach((item, index) => {
            const type = item.dataset.type;
            const src = item.dataset.src;
            
            if (src && (type === 'image' || (src.toLowerCase().endsWith('.svg')))) {
                mediaArray.push({
                    type: type === 'image' && src.toLowerCase().endsWith('.svg') ? 'svg' : type,
                    src: src,
                    index: index,
                    originalIndex: parseInt(item.dataset.index)
                });
            }
        });
        
        // Проверяем наличие SVG файлов и определяем их тип
        mediaArray.forEach(media => {
            if (media.src && media.src.toLowerCase().endsWith('.svg')) {
                media.type = 'svg';
            }
        });
        
        // Обработчики событий для открытия модального окна
        mediaItems.forEach((item, index) => {
            item.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                openModal(index);
            });
        });
        
        // Функция открытия модального окна
        function openModal(index) {
            // Находим элемент по индексу в mediaArray
            const foundItem = mediaArray.find(item => item.index === index);
            
            if (!foundItem) {
                console.error('Медиа элемент не найден');
                return;
            }
            
            // Устанавливаем текущий индекс по найденному элементу
            currentIndex = mediaArray.indexOf(foundItem);
            
            modalContent.innerHTML = '';
            modalContent.classList.remove('loaded');
            
            modal.style.display = 'flex';
            document.body.style.overflow = 'hidden'; // Блокируем прокрутку
            
            updateModalContent();
        }
        
        // Обновление содержимого модального окна
        function updateModalContent() {
            if (currentIndex < 0 || currentIndex >= mediaArray.length) {
                console.error('Ошибка: некорректный индекс ' + currentIndex);
                closeModal();
                return;
            }
            
            const media = mediaArray[currentIndex];
            modalContent.innerHTML = '';
            
            if (media.type === 'image') {
                const img = new Image();
                img.src = media.src;
                img.alt = 'Изображение';
                img.onload = function() {
                    modalContent.classList.add('loaded');
                };
                img.onerror = function() {
                    console.error('Ошибка загрузки изображения');
                    modalContent.innerHTML = '<div style="color: white; text-align: center;">Ошибка загрузки изображения</div>';
                    modalContent.classList.add('loaded');
                };
                modalContent.appendChild(img);
                
                // Добавляем обработчик свайпа для изображений
                setupSwipeHandler(img);
                
            } else if (media.type === 'svg') {
                // Обработка SVG файлов
                fetch(media.src)
                    .then(response => response.text())
                    .then(svgContent => {
                        const container = document.createElement('div');
                        container.style.maxWidth = '100%';
                        container.style.maxHeight = '80vh';
                        container.style.display = 'flex';
                        container.style.justifyContent = 'center';
                        container.style.alignItems = 'center';
                        container.innerHTML = svgContent;
                        
                        // Устанавливаем размеры SVG
                        const svgElement = container.querySelector('svg');
                        if (svgElement) {
                            svgElement.setAttribute('width', '100%');
                            svgElement.setAttribute('height', '100%');
                            svgElement.style.maxWidth = '800px';
                            svgElement.style.maxHeight = '80vh';
                        }
                        
                        modalContent.appendChild(container);
                        modalContent.classList.add('loaded');
                        
                        // Добавляем обработчик свайпа для SVG
                        setupSwipeHandler(container);
                    })
                    .catch(error => {
                        console.error('Ошибка загрузки SVG:', error);
                        modalContent.innerHTML = '<div style="color: white; text-align: center;">Ошибка загрузки SVG файла</div>';
                        modalContent.classList.add('loaded');
                    });
            }
            
            // Обновляем видимость кнопок навигации
            prevBtn.style.visibility = currentIndex > 0 ? 'visible' : 'hidden';
            nextBtn.style.visibility = currentIndex < mediaArray.length - 1 ? 'visible' : 'hidden';
        }
        
        // Добавление обработчика свайпа для изображений в модальном окне
        function setupSwipeHandler(element) {
            let touchStartX = 0;
            let touchEndX = 0;
            
            element.addEventListener('touchstart', function(e) {
                touchStartX = e.changedTouches[0].screenX;
            }, { passive: true });
            
            element.addEventListener('touchend', function(e) {
                touchEndX = e.changedTouches[0].screenX;
                if (window.handleSwipeGesture) {
                    // Используем глобальную функцию если она определена (для мобильных)
                    if (window.handleSwipeGesture(touchStartX, touchEndX)) {
                        return;
                    }
                }
                
                // Стандартная обработка, если глобальная функция не определена или не сработала
                if (touchEndX < touchStartX - 50 && currentIndex < mediaArray.length - 1) {
                    // Свайп влево - следующее изображение
                    modalContent.classList.add('slide-left-out');
                    
                    setTimeout(function() {
                        currentIndex++;
                        modalContent.innerHTML = '';
                        modalContent.classList.remove('loaded', 'slide-left-out');
                        
                        modalContent.classList.add('slide-left-in');
                        updateModalContent();
                        
                        setTimeout(function() {
                            modalContent.classList.remove('slide-left-in');
                        }, 400);
                    }, 300);
                } else if (touchEndX > touchStartX + 50 && currentIndex > 0) {
                    // Свайп вправо - предыдущее изображение
                    modalContent.classList.add('slide-right-out');
                    
                    setTimeout(function() {
                        currentIndex--;
                        modalContent.innerHTML = '';
                        modalContent.classList.remove('loaded', 'slide-right-out');
                        
                        modalContent.classList.add('slide-right-in');
                        updateModalContent();
                        
                        setTimeout(function() {
                            modalContent.classList.remove('slide-right-in');
                        }, 400);
                    }, 300);
                }
            }, { passive: true });
        }
        
        // Закрытие модального окна
        closeBtn.addEventListener('click', closeModal);
        modal.addEventListener('click', function(e) {
            if (e.target === modal) {
                closeModal();
            }
        });
        
        function closeModal() {
            modal.style.display = 'none';
            document.body.style.overflow = ''; // Разблокируем прокрутку
        }
        
        // Навигация по медиа
        prevBtn.addEventListener('click', function(e) {
            e.stopPropagation();
            if (currentIndex > 0) {
                // Анимация выхода текущего контента
                modalContent.classList.add('slide-right-out');
                
                setTimeout(function() {
                    currentIndex--;
                    modalContent.innerHTML = '';
                    modalContent.classList.remove('loaded', 'slide-right-out');
                    
                    // Анимация входа нового контента
                    modalContent.classList.add('slide-right-in');
                    updateModalContent();
                    
                    setTimeout(function() {
                        modalContent.classList.remove('slide-right-in');
                    }, 400);
                }, 300);
            }
        });
        
        nextBtn.addEventListener('click', function(e) {
            e.stopPropagation();
            if (currentIndex < mediaArray.length - 1) {
                // Анимация выхода текущего контента
                modalContent.classList.add('slide-left-out');
                
                setTimeout(function() {
                    currentIndex++;
                    modalContent.innerHTML = '';
                    modalContent.classList.remove('loaded', 'slide-left-out');
                    
                    // Анимация входа нового контента
                    modalContent.classList.add('slide-left-in');
                    updateModalContent();
                    
                    setTimeout(function() {
                        modalContent.classList.remove('slide-left-in');
                    }, 400);
                }, 300);
            }
        });
        
        // Навигация с клавиатуры
        document.addEventListener('keydown', function(e) {
            if (modal.style.display === 'flex') {
                if (e.key === 'ArrowLeft' && currentIndex > 0) {
                    // Анимация выхода текущего контента
                    modalContent.classList.add('slide-right-out');
                    
                    setTimeout(function() {
                        currentIndex--;
                        modalContent.innerHTML = '';
                        modalContent.classList.remove('loaded', 'slide-right-out');
                        
                        // Анимация входа нового контента
                        modalContent.classList.add('slide-right-in');
                        updateModalContent();
                        
                        setTimeout(function() {
                            modalContent.classList.remove('slide-right-in');
                        }, 400);
                    }, 300);
                } else if (e.key === 'ArrowRight' && currentIndex < mediaArray.length - 1) {
                    // Анимация выхода текущего контента
                    modalContent.classList.add('slide-left-out');
                    
                    setTimeout(function() {
                        currentIndex++;
                        modalContent.innerHTML = '';
                        modalContent.classList.remove('loaded', 'slide-left-out');
                        
                        // Анимация входа нового контента
                        modalContent.classList.add('slide-left-in');
                        updateModalContent();
                        
                        setTimeout(function() {
                            modalContent.classList.remove('slide-left-in');
                        }, 400);
                    }, 300);
                } else if (e.key === 'Escape') {
                    closeModal();
                }
            }
        });
        
        // Определяем, мобильное устройство или нет
        const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        
        // Настраиваем элементы интерфейса в зависимости от устройства
        if (isMobile) {
            // Небольшие настройки для мобильных устройств
            modal.addEventListener('touchmove', function(e) {
                e.preventDefault(); // Предотвращаем прокрутку страницы под модальным окном
            }, { passive: false });
            
            // Настраиваем размеры медиа элементов для мобильных устройств
            const mediaItemElements = document.querySelectorAll('.media-item');
            mediaItemElements.forEach(item => {
                // Добавляем класс для мобильных устройств
                item.classList.add('mobile-view');
            });
            
            // Улучшаем чувствительность свайпа на мобильных устройствах
            const swipeThreshold = 30; // Уменьшаем порог для лучшей реакции на свайп
            
            // Переопределяем handleSwipeGesture для всех изображений
            window.handleSwipeGesture = function(startX, endX) {
                if (endX < startX - swipeThreshold && currentIndex < mediaArray.length - 1) {
                    // Свайп влево - следующее изображение
                    modalContent.classList.add('slide-left-out');
                    
                    setTimeout(function() {
                        currentIndex++;
                        modalContent.innerHTML = '';
                        modalContent.classList.remove('loaded', 'slide-left-out');
                        
                        modalContent.classList.add('slide-left-in');
                        updateModalContent();
                        
                        setTimeout(function() {
                            modalContent.classList.remove('slide-left-in');
                        }, 300);
                    }, 200);
                    return true;
                } else if (endX > startX + swipeThreshold && currentIndex > 0) {
                    // Свайп вправо - предыдущее изображение
                    modalContent.classList.add('slide-right-out');
                    
                    setTimeout(function() {
                        currentIndex--;
                        modalContent.innerHTML = '';
                        modalContent.classList.remove('loaded', 'slide-right-out');
                        
                        modalContent.classList.add('slide-right-in');
                        updateModalContent();
                        
                        setTimeout(function() {
                            modalContent.classList.remove('slide-right-in');
                        }, 300);
                    }, 200);
                    return true;
                }
                return false;
            };
        }
    });
</script>
{% endblock %} 