{% extends "base/base.j2" %}

{% block head %}
    <link rel="stylesheet" href="{{ static('css/StoryDetail.css') }}">
{% endblock %}

{% block content %}
<div class="main-container">
    <div class="story-container">
        <div class="story-header">
            <h1 class="story-title">{{ story.title }}</h1>
            <div class="story-meta">
                <div class="story-meta-item">
                    <span class="story-meta-label">–ê–≤—Ç–æ—Ä:</span>
                    <span>{{ story.user.profile.nickname }}</span>
                </div>
                <div class="story-meta-item">
                    <span class="story-meta-label">–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</span>
                    {% if story.categories.exists() %}
                        <span>
                            {% for category in story.categories.all() %}
                                <a href="{{ url('story_list') }}?categories={{ category.id }}" class="story-category-tag">{{ category.name }}</a>
                            {% endfor %}
                        </span>
                    {% elif story.category %}
                        <span>{{ story.category.name }}</span>
                    {% else %}
                        <span>–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</span>
                    {% endif %}
                </div>
                <div class="story-meta-item">
                    <span class="story-meta-label">–î–∞—Ç–∞:</span>
                    <span>{{ story.created_at.strftime('%d.%m.%Y') }}</span>
                </div>
            </div>
        </div>
        
        <div class="story-content">
            <p>{{ story.content|safe }}</p>
        </div>
        
        {% if story.media_files.exists() %}
        <div class="story-media-link">
            <a href="{{ url('story_media', story.id) }}" class="media-button">–û—Ç–∫—Ä—ã—Ç—å –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã</a>
        </div>
        {% endif %}
        
        <div class="story-footer">
            <div class="story-actions">
                <div class="story-reaction">
                    <div class="story-stats like-stats" data-story-id="{{ story.id }}">
                        <span class="stats-count">{{ story.likes.count() }}</span>
                        <span class="like-icon {% if request.user.is_authenticated and request.user in story.likes.all() %}active{% endif %}">üëç</span>
                    </div>
                    
                    <div class=" dislike-stats story-stats" data-story-id="{{ story.id }}">
                        <span class="stats-count">{{ story.dislikes.count() }}</span>
                        <span class="dislike-icon {% if request.user.is_authenticated and request.user in story.dislikes.all() %}active{% endif %}">üëé</span>
                    </div>
                </div>
                
                <a href="{{ url('story_comments', story.id) }}" class="comments-link">
                    <span class="comments-icon">üí¨</span>
                    <span class="comments-count">{{ story.comments.count() }}</span>
                    <span class="comments-text">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏</span>
                </a>
            </div>
            
            <div class="back-to-list">
                <a href="javascript:void(0)" id="backButton" class="back-link">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∏—Å—Ç–æ—Ä–∏–π</a>
            </div>
        </div>
    </div>
</div>

<script>
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –±—Ä–∞—É–∑–µ—Ä passive event listeners
    let passiveSupported = false;
    try {
      const options = {
        get passive() {
          passiveSupported = true;
          return true;
        }
      };
      window.addEventListener("test", null, options);
      window.removeEventListener("test", null, options);
    } catch(err) {
      passiveSupported = false;
    }
    
    document.addEventListener('DOMContentLoaded', function() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        document.querySelectorAll('.stats-count').forEach(formatLargeNumber);
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ª–∞–π–∫–æ–≤ –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤
        {% if request.user.is_authenticated %}
            document.querySelectorAll('.story-stats').forEach(function(button) {
                const iconElement = button.querySelector('.like-icon, .dislike-icon');
                if (iconElement && iconElement.classList.contains('active')) {
                    if (iconElement.classList.contains('like-icon')) {
                        button.classList.add('active-like');
                    } else if (iconElement.classList.contains('dislike-icon')) {
                        button.classList.add('active-dislike');
                    }
                }
            });
        {% endif %}
        
        // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—Ä–∏–π
        const referrer = document.referrer;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—Ä–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏–π
        if (!sessionStorage.getItem('original_stories_url') && referrer.includes('/stories') && !referrer.includes('/media/')) {
            sessionStorage.setItem('original_stories_url', referrer);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ URL –≤ localStorage, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        const urlParams = new URLSearchParams(window.location.search);
        const categoriesParam = urlParams.get('categories');
        if (categoriesParam) {
            localStorage.setItem('selectedCategories', categoriesParam);
            console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ URL:', categoriesParam);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ–≥–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        document.querySelectorAll('.story-category-tag').forEach(function(tag) {
            tag.addEventListener('click', function(e) {
                e.preventDefault();
                
                // –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å—Å—ã–ª–∫–∏
                const href = this.getAttribute('href');
                const urlObj = new URL(href, window.location.origin);
                const categoryId = urlObj.searchParams.get('categories');
                
                if (categoryId) {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ localStorage
                    localStorage.setItem('selectedCategories', categoryId);
                    console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:', categoryId);
                    
                    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ —Å—Å—ã–ª–∫–µ
                    window.location.href = href;
                }
            });
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ª–∞–π–∫–∞ –∏ –¥–∏–∑–ª–∞–π–∫–∞
        document.querySelectorAll('.like-stats, .dislike-stats').forEach(function(button) {
            button.addEventListener('click', function(e) {
                e.preventDefault();
                // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
                e.stopPropagation();
                
                const storyId = this.getAttribute('data-story-id');
                const isLike = this.classList.contains('like-stats');
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∫ —ç—Ç–æ–π –∫–Ω–æ–ø–∫–µ
                // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–ª–∏–∫–æ–≤
                if (this.classList.contains('processing')) {
                    return;
                }
                
                this.classList.add('processing');
                this.classList.remove('button-clicked');
                void this.offsetWidth; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                this.classList.add('button-clicked');
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                sendReaction(storyId, isLike, this);
                
                // –£–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à–æ–π —Ç–∞–π–º–∞—É—Ç
                setTimeout(() => {
                    this.classList.remove('processing');
                }, 800);
            });
            
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—Ä–æ–∂–∞–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏
            button.addEventListener('mousedown', function(e) {
                e.preventDefault();
            });
        });
        
        // –ö–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∏—Å—Ç–æ—Ä–∏–π"
        const backButton = document.getElementById('backButton');
        if (backButton) {
            backButton.addEventListener('click', function(e) {
                e.preventDefault();
                
                // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π URL —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—Ä–∏–π
                let returnUrl = sessionStorage.getItem('original_stories_url');
                
                // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ URL, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                if (!returnUrl) {
                    const urlParams = new URLSearchParams();
                    
                    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    const savedCategories = localStorage.getItem('selectedCategories');
                    const currentPage = localStorage.getItem('currentPage');
                    const lastSlideIndex = localStorage.getItem('lastSlideIndex');
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if (savedCategories) {
                        urlParams.set('categories', savedCategories);
                    }
                    
                    if (currentPage && currentPage !== '1') {
                        urlParams.set('page', currentPage);
                    }
                    
                    if (lastSlideIndex) {
                        urlParams.set('slide_index', lastSlideIndex);
                        urlParams.set('from_story_id', '{{ story.id }}');
                    }
                    
                    returnUrl = '/stories/' + (urlParams.toString() ? '?' + urlParams.toString() : '');
                }
                
                // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π URL –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                sessionStorage.removeItem('original_stories_url');
                
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—Ä–∏–π
                window.location.href = returnUrl;
            });
        }
    });
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∫–æ–Ω–∫–∏
    function toggleIconActive(iconElement, active) {
        if (active) {
            iconElement.classList.add('active');
        } else {
            iconElement.classList.remove('active');
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    function toggleButtonActive(button, active, type) {
        if (type === 'like') {
            if (active) {
                button.classList.add('active-like');
            } else {
                button.classList.remove('active-like');
            }
        } else if (type === 'dislike') {
            if (active) {
                button.classList.add('active-dislike');
            } else {
                button.classList.remove('active-dislike');
            }
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏
    function sendReaction(storyId, isLike, clickedButton) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–µ–∞–∫—Ü–∏–∏
        const url = isLike 
            ? '/stories/ajax/like/' + storyId + '/' 
            : '/stories/ajax/dislike/' + storyId + '/';
        
        // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const container = clickedButton.closest('.story-reaction');
        const likeButton = container.querySelector('.like-stats');
        const dislikeButton = container.querySelector('.dislike-stats');
        const likeIcon = likeButton.querySelector('.like-icon');
        const dislikeIcon = dislikeButton.querySelector('.dislike-icon');
        const likeCount = likeButton.querySelector('.stats-count');
        const dislikeCount = dislikeButton.querySelector('.stats-count');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const wasLikeActive = likeIcon.classList.contains('active');
        const wasDislikeActive = dislikeIcon.classList.contains('active');
        
        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': getCookie('csrftoken')
            },
            credentials: 'same-origin'
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –ª–∞–π–∫
                if (isLike) {
                    // –ï—Å–ª–∏ –ª–∞–π–∫ –±—ã–ª –ø–æ—Å—Ç–∞–≤–ª–µ–Ω
                    toggleIconActive(likeIcon, data.liked);
                    toggleButtonActive(likeButton, data.liked, 'like');
                    
                    // –ï—Å–ª–∏ –±—ã–ª –¥–∏–∑–ª–∞–π–∫ –∏ –Ω—É–∂–Ω–æ –µ–≥–æ —É–±—Ä–∞—Ç—å
                    if (data.was_disliked) {
                        toggleIconActive(dislikeIcon, false);
                        toggleButtonActive(dislikeButton, false, 'dislike');
                        
                        // –ê–Ω–∏–º–∏—Ä—É–µ–º –¥–∏–∑–ª–∞–π–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –∏ –º–µ–Ω—è–µ–º –Ω–∞ –ª–∞–π–∫
                        if (wasDislikeActive) {
                            dislikeButton.classList.remove('button-clicked');
                            void dislikeButton.offsetWidth;
                            dislikeButton.classList.add('button-clicked');
                        }
                    }
                } 
                // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –¥–∏–∑–ª–∞–π–∫
                else {
                    // –ï—Å–ª–∏ –¥–∏–∑–ª–∞–π–∫ –±—ã–ª –ø–æ—Å—Ç–∞–≤–ª–µ–Ω
                    toggleIconActive(dislikeIcon, data.disliked);
                    toggleButtonActive(dislikeButton, data.disliked, 'dislike');
                    
                    // –ï—Å–ª–∏ –±—ã–ª –ª–∞–π–∫ –∏ –Ω—É–∂–Ω–æ –µ–≥–æ —É–±—Ä–∞—Ç—å
                    if (data.was_liked) {
                        toggleIconActive(likeIcon, false);
                        toggleButtonActive(likeButton, false, 'like');
                        
                        // –ê–Ω–∏–º–∏—Ä—É–µ–º –ª–∞–π–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –∏ –º–µ–Ω—è–µ–º –Ω–∞ –¥–∏–∑–ª–∞–π–∫
                        if (wasLikeActive) {
                            likeButton.classList.remove('button-clicked');
                            void likeButton.offsetWidth;
                            likeButton.classList.add('button-clicked');
                        }
                    }
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                updateCountWithAnimation(likeCount, data.likes_count);
                updateCountWithAnimation(dislikeCount, data.dislikes_count);
            } else {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
                if (data.message && data.message.includes('–∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å')) {
                    window.location.href = '/users/login/';
                }
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞:', error);
        });
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    function updateCountWithAnimation(countElement, newValue) {
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É —ç–ª–µ–º–µ–Ω—Ç–∞
        const originalWidth = countElement.offsetWidth;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        countElement.classList.add('count-animated');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        countElement.textContent = formatLargeNumber(newValue);
        
        // –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à–æ–µ –≤—Ä–µ–º—è
        setTimeout(() => {
            countElement.classList.remove('count-animated');
        }, 400);
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
    function formatLargeNumber(element) {
        if (typeof element === 'object' && element !== null) {
            const num = parseInt(element.textContent.trim(), 10);
            element.textContent = formatLargeNumber(num);
            return element;
        }
        
        const num = parseInt(element, 10);
        if (num >= 1000000) {
            return (num / 1000000).toFixed(1) + '–ú';
        } else if (num >= 1000) {
            return (num / 1000).toFixed(1) + '–ö';
        }
        return num.toString().padStart(1, ' ');
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É–∫–∏
    function getCookie(name) {
        let cookieValue = null;
        if (document.cookie && document.cookie !== '') {
            const cookies = document.cookie.split(';');
            for (let i = 0; i < cookies.length; i++) {
                const cookie = cookies[i].trim();
                if (cookie.substring(0, name.length + 1) === (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }
</script>
{% endblock %} 