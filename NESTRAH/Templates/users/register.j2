{% extends "Base/Base.j2" %}

{% block head %}
    <link rel="stylesheet" href="{{ static('css/Base.css') }}">
    <link rel="stylesheet" href="{{ static('css/FormContainer.css') }}">
    <link rel="stylesheet" href="{{ static('css/Register.css') }}">
{% endblock %}


{% block content %}
    <div class="main-info">
        <div class="main-info-text">
            <h1 class="main-title">–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø</h1>
            <p class="main-description">–°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –≤ –ù–ï—Å—Ç—Ä–∞—Ö–æ–≤–æ–π –∏ –∑–∞—Å—Ç—Ä–∞—Ö—É–π—Ç–µ —Å–≤–æ–∏ —Ñ–µ–π–ª—ã üôÉ!</p>
        </div>
        <div class="container {% if not error and not all_errors %}container-expanding{% endif %}">
            <div class="container-auth">
                <h2 class="container-auth-form-title">–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø</h2>
                <div class="container-auth-form">
                    <form method="post" class="container-auth-form-input">
                        {{ csrf_input }}
                        <div class="input-wrapper">
                            <input type="email" name="email" placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É" value="{{ request.POST.email|default('') }}" required>
                            <span class="input-icon">üìß</span>
                        </div>
                        <div class="input-wrapper">
                            <input type="password" name="password1" id="password1" placeholder="–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å" required>
                            <span class="input-icon">üîë</span>
                        </div>
                        <div class="input-wrapper">
                            <input type="password" name="password2" placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å" required>
                            <span class="input-icon">üîê</span>
                        </div>
                        
                        <div class="error-message-wrapper {% if error or all_errors %}with-error{% endif %}">
                            {% if error %}
                            <div class="container-auth-error">{{ error }}</div>
                            {% endif %}
                            
                            {% if all_errors and all_errors|length > 1 %}
                            <ul class="error-list">
                                {% for error_msg in all_errors[1:] %}
                                <li class="error-list-item" style="animation-delay: {{ loop.index * 0.1 }}s">{{ error_msg }}</li>
                                {% endfor %}
                            </ul>
                            {% endif %}
                        </div>
                        
                        <div class="requirements-container">
                            <div class="password-requirements {% if not error and not all_errors %}visible{% endif %}" id="passwordRequirements">
                                <p>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é:</p>
                                <ul>
                                    <li id="length-requirement">–ù–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤</li>
                                    <li id="email-requirement">–ù–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Ö–æ–∂ –Ω–∞ email</li>
                                    <li id="common-requirement">–ù–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç—ã–º</li>
                                    <li id="numeric-requirement">–ù–µ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä</li>
                                    <li id="match-requirement">–ü–∞—Ä–æ–ª–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å</li>
                                </ul>
                            </div>
                        </div>
                        
                        <div class="container-auth-form-button hidden">
                            <button type="submit">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</button>
                        </div>
                        
                        <div class="login-link-container">
                            <p class="container-auth-form-text">–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? <a href="{{ url('login') }}">–í—Ö–æ–¥‚Üí</a></p>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // –ö—ç—à–∏—Ä—É–µ–º DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
            const password1Field = document.getElementById('password1');
            const password2Field = document.querySelector('input[name="password2"]');
            const passwordRequirements = document.getElementById('passwordRequirements');
            const submitButton = document.querySelector('.container-auth-form-button');
            const container = document.querySelector('.container');
            
            const lengthRequirement = document.getElementById('length-requirement');
            const emailRequirement = document.getElementById('email-requirement');
            const commonRequirement = document.getElementById('common-requirement');
            const numericRequirement = document.getElementById('numeric-requirement');
            const matchRequirement = document.getElementById('match-requirement');
            
            const emailField = document.querySelector('input[name="email"]');
            
            const COMMON_PASSWORDS = ['password', '12345678', 'qwerty', '123456789', 'abc123', '111111', 'admin'];
            
            let passwordsMatch = false;
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –ø–∞—Ä–æ–ª—é
            function checkAllRequirementsMet() {
                return lengthRequirement.classList.contains('completed') &&
                       emailRequirement.classList.contains('completed') &&
                       commonRequirement.classList.contains('completed') &&
                       numericRequirement.classList.contains('completed');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
            function checkPasswordsMatch() {
                if (password1Field.value && password2Field.value) {
                    passwordsMatch = password1Field.value === password2Field.value;
                    
                    if (passwordsMatch) {
                        matchRequirement.classList.add('completed');
                    } else {
                        matchRequirement.classList.remove('completed');
                    }
                    
                    return passwordsMatch;
                }
                
                matchRequirement.classList.remove('completed');
                passwordsMatch = false;
                return false;
            }
            
            // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –ø–∞—Ä–æ–ª—é
            function togglePasswordRequirements(show) {
                if (show) {
                    container.classList.add('container-expanding');
                    submitButton.classList.add('hidden');
                    
                    setTimeout(() => {
                        passwordRequirements.classList.add('visible');
                    }, 150);
                } else {
                    passwordRequirements.classList.remove('visible');
                    
                    setTimeout(() => {
                        container.classList.remove('container-expanding');
                        
                        if (checkAllRequirementsMet() && checkPasswordsMatch()) {
                            submitButton.classList.remove('hidden');
                        }
                    }, 350);
                }
            }
            
            // –°–∫—Ä—ã—Ç–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –µ—Å–ª–∏ –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
            function hideRequirementsIfNeeded() {
                if (checkAllRequirementsMet() && checkPasswordsMatch()) {
                    if (passwordRequirements.classList.contains('visible')) {
                        setTimeout(() => {
                            togglePasswordRequirements(false);
                        }, 500);
                    }
                }
            }
            
            // –ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é –∏ —Å–∫—Ä—ã—Ç—å –æ—à–∏–±–∫–∏
            function showErrorRequirements() {
                const errorElements = document.querySelectorAll('.container-auth-error, .error-list');
                errorElements.forEach(el => {
                    if (el.style.display !== 'none') {
                        el.style.display = 'none';
                    }
                });
                
                togglePasswordRequirements(true);
            }
            
            // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫–∏ –∏ —Å–∫—Ä—ã—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é
            function showErrorsHideRequirements() {
                passwordRequirements.classList.remove('visible');
                container.classList.remove('container-expanding');
                submitButton.classList.add('hidden');
                
                const errorElements = document.querySelectorAll('.container-auth-error, .error-list');
                errorElements.forEach(el => {
                    el.style.display = '';
                });
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –ø–∞—Ä–æ–ª—é –ø—Ä–∏ –≤–≤–æ–¥–µ
            function checkPasswordRequirements() {
                const password = password1Field.value;
                const email = emailField.value;
                
                if (!password) {
                    togglePasswordRequirements(true);
                    return;
                }
                
                // –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è
                if (password.length >= 8) {
                    lengthRequirement.classList.add('completed');
                } else {
                    lengthRequirement.classList.remove('completed');
                }
                
                // –°—Ö–æ–¥—Å—Ç–≤–æ —Å email
                if (email && password) {
                    if (email.toLowerCase().includes(password.toLowerCase()) || 
                        password.toLowerCase().includes(email.toLowerCase())) {
                        emailRequirement.classList.remove('completed');
                    } else {
                        emailRequirement.classList.add('completed');
                    }
                } else {
                    emailRequirement.classList.add('completed');
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏—Ñ—Ä—ã
                if (password && !(/^\d+$/.test(password))) {
                    numericRequirement.classList.add('completed');
                } else {
                    numericRequirement.classList.remove('completed');
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
                if (password && !COMMON_PASSWORDS.includes(password.toLowerCase()) && password.length >= 8) {
                    commonRequirement.classList.add('completed');
                } else {
                    commonRequirement.classList.remove('completed');
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
                checkPasswordsMatch();
                
                // –°–∫—Ä—ã–≤–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
                hideRequirementsIfNeeded();
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ –ø–æ–ª—è—Ö –ø–∞—Ä–æ–ª—è
            [password1Field, password2Field].forEach(field => {
                field.addEventListener('focus', () => {
                    const errorElements = document.querySelectorAll('.container-auth-error, .error-list');
                    if (errorElements.length > 0 && errorElements[0].style.display !== 'none') {
                        showErrorRequirements();
                    } else {
                        togglePasswordRequirements(true);
                    }
                });
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –ø–æ–ª–µ email
            emailField.addEventListener('focus', () => {
                const errorElements = document.querySelectorAll('.container-auth-error, .error-list');
                if (errorElements.length > 0 && errorElements[0].style.display !== 'none') {
                    showErrorRequirements();
                }
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –≤–≤–æ–¥–µ
            password1Field.addEventListener('input', checkPasswordRequirements);
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
            password2Field.addEventListener('input', function() {
                checkPasswordsMatch();
                
                if (this.value && password1Field.value && !passwordsMatch) {
                    togglePasswordRequirements(true);
                } else {
                    hideRequirementsIfNeeded();
                }
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ blur –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—è –ø–∞—Ä–æ–ª—è
            password2Field.addEventListener('blur', function() {
                if (password1Field.value && this.value && !passwordsMatch) {
                    togglePasswordRequirements(true);
                } else if (checkAllRequirementsMet() && checkPasswordsMatch()) {
                    togglePasswordRequirements(false);
                }
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ blur –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—è –ø–∞—Ä–æ–ª—è
            password1Field.addEventListener('blur', function() {
                if (!this.value) {
                    togglePasswordRequirements(true);
                } else if (checkAllRequirementsMet() && checkPasswordsMatch()) {
                    togglePasswordRequirements(false);
                }
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è email
            emailField.addEventListener('input', function() {
                if (password1Field.value) {
                    password1Field.dispatchEvent(new Event('input'));
                }
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞, —á—Ç–æ–±—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            // –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤–º–µ—Å—Ç–æ –æ—à–∏–±–æ–∫
            if (document.querySelector('.container-auth-error') || document.querySelector('.error-list')) {
                showErrorsHideRequirements();
                
                const allInputs = document.querySelectorAll('input');
                const handleInput = function() {
                    const errorElements = document.querySelectorAll('.container-auth-error, .error-list');
                    if (errorElements.length > 0 && errorElements[0].style.display !== 'none') {
                        showErrorRequirements();
                        
                        // –£–¥–∞–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ
                        allInputs.forEach(inp => {
                            inp.removeEventListener('input', handleInput);
                        });
                    }
                };
                
                allInputs.forEach(input => {
                    input.addEventListener('input', handleInput);
                });
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if (password1Field.value) {
                // –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
                checkPasswordRequirements();
                if (password2Field.value) {
                    checkPasswordsMatch();
                }
            } else {
                // –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω
                if (document.querySelector('.container-auth-error') || document.querySelector('.error-list')) {
                    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö
                    showErrorsHideRequirements();
                } else {
                    // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
                    const requirementItems = passwordRequirements.querySelectorAll('li');
                    requirementItems.forEach((item, index) => {
                        setTimeout(() => {
                            item.style.opacity = '1';
                            item.style.transform = 'translateX(0)';
                        }, 300 + index * 100);
                    });
                    
                    // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
                    const requirementTitle = passwordRequirements.querySelector('p');
                    setTimeout(() => {
                        if (requirementTitle) {
                            requirementTitle.style.opacity = '1';
                            requirementTitle.style.transform = 'translateY(0)';
                        }
                    }, 300);
                }
            }
        });
    </script>
{% endblock %} 